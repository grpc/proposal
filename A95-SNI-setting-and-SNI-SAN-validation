### Background

In [A29][A29] for TLS security in xDS-managed connections, it
proposed that the `SNI` field from [UpstreamTlsContext.SNI][UTC_SNI]
would be ignored and [DownstreamTlsContext.require_sni][DTC_require-SNI] 
would cause the LDS update to fail. In proposal changes these, 
and also starts using certain other related fields for securing 
TLS connections via xDS.

For an overview of securing connections in the envoy proxy using SNI 
and SAN validation, see [envoy-SNI].

[UTC_SNI]: https://github.com/envoyproxy/envoy/blob/ee2bab9e40e7d7649cc88c5e1098c74e0c79501d/api/envoy/extensions/transport_sockets/tls/v3/tls.proto#L42
[DTC_require-SNI]: https://github.com/envoyproxy/envoy/blob/ee2bab9e40e7d7649cc88c5e1098c74e0c79501d/api/envoy/extensions/transport_sockets/tls/v3/tls.proto#L115
[A29]: A29-xds-tls-security.md
[envoy-SNI]: https://www.envoyproxy.io/docs/envoy/latest/_sources/start/quick-start/securing.rst.txt

## Proposal
This proposal has two parts:
* Setting SNI
xDS-managed gRPC clients will set SNI for the Tls handshake for 
Tls connections using the fields from [UpstreamTlsContext][UTC]
in a CDS update.

1. If [UpstreamTlsContext][UTC] specifies the SNI to use, then
it will be used.

2. If [UpstreamTlsContext][UTC] specifies `auto_host_sni`, then
SNI will be set to the hostname, which is either the logical
DNS name for DNS clusters or the endponit hostname for EDS
clusters, as in the case of the hostname useed for authority
rewriting [Ar 81-hostname][A81-hostname].

[UTC]: https://github.com/envoyproxy/envoy/blob/ee2bab9e40e7d7649cc88c5e1098c74e0c79501d/api/envoy/extensions/transport_sockets/tls/v3/tls.proto#L29
[A81-hostname]: https://github.com/grpc/proposal/blob/4f833c5774e71e94534f72b94ee1b9763ec58516/A81-xds-authority-rewriting.md?plain=1#L85

* Server SAN validation against SNI used

If `auto_sni_san_validation` is set in the [UpstreamTlsContext][UTC] 
gRPC client will replace any Subject Alternative Name (SAN) 
validations with a validation for a DNS SAN matching the SNI value 
sent.

### Related Proposals:
* [gRFC A29: xDS-Based Security for gRPC Clients and Servers][A29]
* [gRFC A81: xDS Authority Rewriting][A81]

[A29]: A29-xds-tls-security.md
[A81]: A81-xds-authority-rewriting.md

### xds_cluster_impl LB Policy Changes
#### Setting SNI
As mentioned in [A29 implementation details][A29_impl-details] the
`UpstreamTlsContext` is either passed down to child policies via
channel arguments or is put in sub-channel attribute wrapped in a
`SslContextProvider`, depending on the language. This mechanism
will be augmented in the ClusterImpl LB policy to also add the
information about SNI if any that needs to be used during the 
Tls handshake. To make this decision, the the LB policy will
make use of [UpstreamTlsContext.SNI][UTC_SNI] and the hostname
from `CdsUpdate` that is passed down by the Cds LB policy to the
ClusterImpl LB policy. In a language implementation dependent
way, this SNI value to set will be passed on to the Tls handling
code. For example, in Java, there is a `ProtocolNegotiators.ClientTlsHandler` 
that is made available the `SslContext` dynamically constructed 
based on the cert store to use as indicated by `UpstreamTlsContext`. 
This `ProtocolNegotiators.ClientTlsHandler` will also be handed
over the SNI value by the `SslContextProvider` to use when 
creating the `SslEngine` for the transport.

[A29_impl-details]: https://github.com/grpc/proposal/blob/master/A29-xds-tls-security.md#implementation-details
[UTC_SNI]: https://github.com/envoyproxy/envoy/blob/ee2bab9e40e7d7649cc88c5e1098c74e0c79501d/api/envoy/extensions/transport_sockets/tls/v3/tls.proto#L42
