Remove grpc_insecure_channel_create and grpc_server_add_insecure_http2_port from Core Surface API
----
* Author(s): yihuazhang
* Approver: markdroth
* Status: {In Review}
* Implemented in: https://github.com/grpc/grpc/pull/25586
* Last updated: 2021-11-01
* Discussion at: https://groups.google.com/g/grpc-io/c/9B4-AHCx_ZM 

## Abstract

* Remove `grpc_insecure_channel_create` and `grpc_server_add_insecure_http2_port` from Core Surface API.
* Rename `grpc_server_add_secure_http2_port` to `grpc_server_add_http2_port`.
* Rename `grpc_secure_channel_create` to `grpc_channel_create` and re-order its parameters.
* Move `grpc_channel_credentials` and `grpc_server_credentials`related API's from `grpc_security.h` to `grpc.h`.
* Add `grpc_channel_create_from_fd` and `grpc_server_add_channel_from_fd` to Core Surface API.

## Background

Currently, the gRPC insecure build does not include any of the functions in `grpc_security.h`, nor does it include any of the code in `src/core/lib/security`. This means that it does not support channel or call credentials, security connectors, or client/server auth filters. It also does not link in SSL libraries.

We could stop supporting insecure builds, so that all builds of gRPC include the functions in `grpc_security.h` and the code in `src/core/lib/security`.  However, the gRPC build would not directly include the SSL libraries.  Instead, there would be separate build targets for each of the credential types (both insecure and secure). Only those credential types that need SSL would pull in the SSL library dependencies.


## Proposal

First, move `grpc_channel_credentials` and `grpc_server_credentials`related API's from `grpc_security.h` to `grpc.h`.

```
/** --- grpc_channel_credentials object. ---
   A channel credentials object represents a way to authenticate a client on a
   channel. Different types of channel credentials are declared in
   grpc_security.h. */

typedef struct grpc_channel_credentials grpc_channel_credentials;

/** Releases a channel credentials object.
   The creator of the credentials object is responsible for its release. */

GRPCAPI void grpc_channel_credentials_release(grpc_channel_credentials* creds);

/** --- grpc_server_credentials object. ---
   A server credentials object represents a way to authenticate a server.
   Different types of server credentials are declared in grpc_security.h. */

typedef struct grpc_server_credentials grpc_server_credentials;

/** Releases a server_credentials object.
   The creator of the server_credentials object is responsible for its release.
   */
GRPCAPI void grpc_server_credentials_release(grpc_server_credentials* creds);

```

Second, rename `grpc_secure_channel_create` to `grpc_channel_create` and re-order its parameters. Then, move it from `grpc_security.h` to `grpc.h`.


```
/** Creates a secure channel using the passed-in credentials. Additional
    channel level configuration MAY be provided by grpc_channel_args, though
    the expectation is that most clients will want to simply pass NULL. The
    user data in 'args' need only live through the invocation of this function.
    However, if any args of the 'pointer' type are passed, then the referenced
    vtable must be maintained by the caller until grpc_channel_destroy
    terminates. See grpc_channel_args definition for more on this. */
GRPCAPI grpc_channel* grpc_channel_create(const char* target,
                                          grpc_channel_credentials* creds,
                                          const grpc_channel_args* args);
```

Third, rename `grpc_server_add_secure_http2_port` to `grpc_server_add_http2_port` and move it from `grpc_security.h` to `grpc.h`.

```
/** Add a HTTP2 over an encrypted link over tcp listener.
   Returns bound port number on success, 0 on failure.
   REQUIRES: server not started */
GRPCAPI int grpc_server_add_http2_port(grpc_server* server, const char* addr,
                                       grpc_server_credentials* creds);
```

Fourth, add `grpc_channel_create_from_fd` and `grpc_server_add_channel_from_fd` to `grpc.h`. Note that the current APIs only support
either insecure channel credentials (at client-side) or insecure server credentials (at server-side), and using other types of
credentials will result in a failure. In future, the API's will be improved to support other types of credentials.


```
/** Create a secure channel to 'target' using file descriptor 'fd' and passed-in
    credentials. The 'target' argument will be used to indicate the name for
    this channel. Note that this API currently only supports insecure channel
    credentials. Using other types of credentials will result in a failure. */
GRPCAPI grpc_channel* grpc_channel_create_from_fd(
    const char* target, int fd, grpc_channel_credentials* creds,
    const grpc_channel_args* args);

/** Add the connected secure communication channel based on file descriptor 'fd'
   to the 'server' and server credentials 'creds'. The 'fd' must be an open file
   descriptor corresponding to a connected socket. Events from the file
   descriptor may come on any of the server completion queues (i.e completion
   queues registered via the grpc_server_register_completion_queue API).
   The 'reserved' pointer MUST be NULL.
   TODO(hork): add channel_args to this API to allow endpoints and transports
   created in this function to participate in the resource quota feature.
   Note that this API currently only supports inseure server credentials
   Using other types of credentials will result in a failure. */
GRPCAPI void grpc_server_add_channel_from_fd(grpc_server* server,
                                             void* reserved, int fd,
                                             grpc_server_credentials* creds);

```
Fifth, remove `grpc_insecure_channel_create` and `grpc_server_add_insecure_http2_port` from `grpc.h`. After this change takes effect, the only way of creating gRPC insecure channels will be first creating insecure channel or server credentials, and then invoking `grpc_channel_create` or `grpc_server_add_http2_port` at client or server side, respectively.

## Rationale

* By removing gRPC insecure build, gRPC build system will be simplified. We do not need to maintain two implementations of certain features - one for secure build and another for insecure one. `grpclb_channel.cc` and `grpclb_channel_secure.cc` is an example.

* From security perspective, if there is a need to restrict the usage of gRPC insecure channels, the problem is simplified to some extent because we only need to control a single means of creating insecure channels, instead of two.

* Most importantly, since we introduce a different target for each credential type, for the binaries that do not rely on SSL-related functionalities, they do not need to bringin SSL dependency and thus will have a smaller binary size.

## Implementation

Core: https://github.com/grpc/grpc/pull/25586/files

## Open issues (if applicable)

N/A
